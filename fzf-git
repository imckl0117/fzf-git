#!/bin/bash

git_add() {
	git add .

	read -n 1 -p 'Commit now? [y/Y/n/N] ' opt

	echo

	case "$opt" in
		[nN])
			return
			;;
		[yY])
			git commit
			;;
		*)
			echo "Unknown option $opt"
			;;
	esac

	unset opt
}

git_add_some() {
	files="$(git status --porcelain=v1 | awk '{ print $2 }' | fzf --border --layout=reverse -m --preview='git diff {}')"

	[[ -z "$files" ]] && return

	echo "$files" | xargs git add

	read -n 1 -p 'Commit now? [y/Y/n/N] ' opt

	echo

	case "$opt" in
		[nN])
			return
			;;
		[yY])
			git commit
			;;
		*)
			echo "Unknown option $opt"
			;;
	esac

	unset opt
}

git_add_updated() {
	git add -u

	read -n 1 -p 'Commit now? [y/Y/n/N] ' opt

	echo

	case "$opt" in
		[nN])
			return
			;;
		[yY])
			git commit
			;;
		*)
			echo "Unknown option $opt"
			;;
	esac

	unset opt
}

git_branch() {
	GIT_PAGER= git branch
}

git_checkout() {
	GIT_PAGER= git branch -a | awk '{ print substr($0, 3) }' | grep -v -- '->' | fzf --border --height=50% --layout=reverse | sed 's/remotes\/origin\///g' | xargs git checkout
}

git_checkout_local() {
	GIT_PAGER= git branch | awk '{ print substr($0, 3) }' | fzf --border --height=50% --layout=reverse | xargs git checkout
}

git_clean() {
	read -n 1 -p 'Are you sure? [y/Y/n/N] ' opt

	echo

	case "$opt" in
		[nN])
			return
			;;
		[yY])
			git clean -fd
			;;
		*)
			echo "Unknown option $opt"
			;;
	esac

	unset opt
}

git_create_branch() {
	read -p 'Branch name: ' branch

	[[ -z "$branch" ]] && return

	git checkout -b "$branch"

	unset branch
}

git_commit() {
	git commit
}

git_diff() {
	git diff
}

git_diff_staged() {
	git diff --staged
}

git_delete_branch() {
	GIT_PAGER= git branch | awk '{ print substr($0, 3) }' | fzf --border --height=50% --layout=reverse -m | xargs git branch -d
}

git_log() {
	git log
}

git_log_preview() {
	git log --format='format:%h, %s, by %an' | fzf --border --layout=reverse --preview='echo {} | cut -d , -f 1 | xargs git show' | cut -d , -f 1 | pbcopy
}

git_push() {
	git push
}

git_push_upstream() {
	git push -u origin HEAD
}

git_rebase_main() {
	branch="$(GIT_PAGER= git branch | grep '\*' | awk '{ print substr($0, 3) }')"

	git checkout main

	git pull

	git checkout "$branch"

	git rebase main

	unset branch
}

git_rebase_main_multi() {
	branches="$(GIT_PAGER= git branch | awk '{ print substr($0, 3) }' | sed 's/remotes\/.*\///g' | fzf --border --height=50% --layout=reverse -m)"

	[[ -z "$branches" ]] && return

	echo "$branches" | while read branch
		do
			echo "Rebasing branch $branch"

			git checkout main

			git pull

			git checkout "$branch"

			git rebase main
		done

	unset $branches
}

git_rename_branch() {
	branch="$(GIT_PAGER= git branch | grep '\*' | awk '{ print substr($0, 3) }')"

	echo "Renaming branch $branch"

	read -p 'New branch name: ' rename

	[[ -z "$rename" ]] && return

	git branch -m "$rename"

	unset branch
}

git_reset() {
	git reset
}

git_reset_hard() {
	read -n 1 -p 'Are you sure? [y/Y/n/N] ' opt

	echo

	case "$opt" in
		[nN])
			return
			;;
		[yY])
			git reset --hard
			;;
		*)
			echo "Unknown option $opt"
			;;
	esac

	unset opt
}

git_reset_some() {
	git ls-files -m | fzf --border --layout=reverse -m --preview='git diff {}' | xargs git checkout --
}

git_status() {
	git status
}

cmd="$(echo 'add add-some add-updated branch checkout checkout-local clean create-branch commit delete-branch diff diff-staged log log-preview push push-upstream rebase-main rebase-main-multi rename-branch reset reset-hard reset-some status' | sed 's/\ /\n/g' | fzf --border --height=50% --layout=reverse)"

[[ -z "$cmd" ]] && exit 1

"git_$(echo $cmd | sed 's/-/_/g')"

unset cmd
